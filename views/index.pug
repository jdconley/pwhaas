html
    head
        title Pwhaas - Password Hash as a Service
        link(rel="shortcut-icon" href="favicon.ico")
        style(type="text/css").
            body {
                font-family: Arial, sans-serif;
                font-size: larger;
            }
    body
        div(style="max-width: 666px; margin: 100px auto;")
            h1 Password Hash As A Service
            p
                strong Pwhaas is a service that lets the good guys hash passwords with the same powerful hardware used by attackers. 
            p This makes the attacker's job 100's of times harder as it increases the amount of time they have to spend guessing passwords obtained in a data breach.
            p It is a RESTful API that fully utilizes current generation fast hardware to hash passwords. We're talking 10's of CPU cores, up to 4GB of RAM, and up to two seconds of CPU time for each password.

            h2 Why do I care?
            p 
                span Glad you asked! Well, have you been paying attention to the news lately? Sites are hacked. Databases are stolen. Passwords are released. There are even 
                a(href="https://haveibeenpwned.com/") web services
                span  dedicated to keeping consumers informed about leaks.
            p Every software engineer these days knows they cannot store plain text passwords, so they use a one-way hash on the passwords. However, attackers don't just give up. When a new hack takes place, attackers get right to work utilizing GPU's and huge multi-core systems to try to crack those passwords.
            p If you're unfamiliar with the term "one-way hash", it just means to convert the password to an unreadable mumbo jumbo of information in a repeatable way using lots of fancy math. When properly designed, this math insures that there is no way you can retrieve someone's password once it is hashed. All you can do is repeat the same hash algorithm on a plain text password and see if it matches the original one. Hashing is not encryption, because with encryption you can retrieve the information. That's why websites and apps cannot send you your password when you forget it. They do not know the password either.
            p So, even if someone steals your database, if you have hashed passwords the attacker would have to try to guess each person's password individually by repeating the hashing algorithm that was used to protect the passwords. That's good. The problem is that attackers use very powerful hardware that is usually 100x or more powerful than the typical server used to create the hashes, and they can often guess at a password thousands or millions of times per second. That's where we come in.

            h2 Usage
            p 
                span See 
                a(href="https://github.com/jdconley/pwhaas") pwhaas on Github
                span  for usage information. You can install the 
                a(href="https://github.com/jdconley/pwhaas-js") pwhaas Node.JS module
                span  to get going quickly if you use Node.JS 4.0+.

            h2 Pricing
            p We have special introductory pricing! Lock in savings of 50% or more, for life!
            p
                span We are currently in a private beta period for paid accounts and availability is limited. 
                a(href="mailto:info@pwhaas.com") Send us an email
                span  with your requirements if you want to participate or otherwise chat about password hashing.

            div
                h3 Free
                p To access the free tier just use the default API Key in our libraries, or set it to "secret".
                ul
                    li 1,000ms hash time limit
                    li 8 VM CPU cores
                    li Shared VM's, requests can overlap
                    li 
                        span Hash cost of 7,000
                        sup 
                            small 1
                    li 100 hashes/day
            div
                h3 Hobby - $20/month
                p Moderate protection for hobbyists and startups with real users.
                ul
                    li 1,000ms hash time limit
                    li 16 VM CPU cores
                    li Dedicated VM instance per request
                    li 
                        span Hash cost of 15,000
                        sup 
                            small 1
                    li 100 hashes/day, $0.01 per hash second thereafter
            div
                h3 Paranoid - $100/mo
                p For sensitive applications where having the best possible hash is desired.
                ul
                    li 2,000ms hash time limit
                    li 48 CPU cores on metal (no Virtual Machines)
                    li Dedicated hardware instance per request
                    li 
                        span Hash cost of 50,000
                        sup 
                            small 1
                    li 1,000 hashes/day, $0.05 per hash second thereafter
            
            h3 Enterprise - Get Quote
            p 
                span Need something more? Want dedicated instances to call your own? Desire VM's or metal in certain data centers? 
                a(href="mailto:info@pwhaas.com") Let us know!

            h2 FAQ
            h3 Hesitant to send your users' passwords to a new service?
            p Fair enough. Then don't! Grab the code and run the service yourself, or hash passwords locally before you send them so pwhaas ends up just hashing a hash. The pwhaas libraries do this with a fast configuration of Argon2 locally before sending the password to the pwhaas service. Everything is also transmitted over SSL/TLS.
            
            h3 What if Pwhaas is down?
            p No problem! The pwhaas libraries automatically fall back to local hashing and verifying. The local hashes will be much less secure than the ones in the cloud, but are probably about 10x as secure as the default Argon2 options. Verifying will take significantly longer than our API if your hardware is not similar to ours.

            p(style="margin-top: 400px")
                sup 
                    small 1
                small Hash costs are estimates based on measurements taken from representative systems and may vary depending on the actual hardware, concurrent requests, and operating system overhead. Costs are based on the formula: [parallelism] x [memory cost] x [time cost]. The default hash cost is 36, based on the formula 3 x 12 x 1 = 36.

            p 
                span &copy; Copyright 2016, 
                a(href="https://www.linkedin.com/in/jdconley") JD Conley.
            